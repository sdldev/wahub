version: '3.8'

services:
  # WhatsApp Gateway Application
  wa-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wa-gateway-app
    restart: unless-stopped
    ports:
      - "${PORT:-5001}:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - KEY=${KEY:-your-secure-api-key}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL:-}
      - MESSAGE_DELAY_MIN=${MESSAGE_DELAY_MIN:-3000}
      - MESSAGE_DELAY_MAX=${MESSAGE_DELAY_MAX:-7000}
      - MAX_MESSAGES_PER_MINUTE=${MAX_MESSAGES_PER_MINUTE:-20}
      - MAX_MESSAGES_PER_HOUR=${MAX_MESSAGES_PER_HOUR:-500}
      - MAX_MESSAGES_PER_RECIPIENT=${MAX_MESSAGES_PER_RECIPIENT:-10}
      - MAX_RETRY_ATTEMPTS=${MAX_RETRY_ATTEMPTS:-3}
      - DATABASE_URL=file:./data/app.db
      - REDIS_URL=redis://redis:6379
    volumes:
      # Persistent storage untuk WhatsApp credentials
      - wa_credentials:/app/wa_credentials
      # Persistent storage untuk media files
      - media_files:/app/media
      # Persistent storage untuk database
      - database_data:/app/data
      # Logs
      - logs_data:/app/logs
    depends_on:
      - redis
    networks:
      - wa-gateway-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 5001, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis untuk Queue Management
  redis:
    image: redis:7-alpine
    container_name: wa-gateway-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wa-gateway-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: wa-gateway-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - wa-gateway
    networks:
      - wa-gateway-network
    profiles:
      - nginx

  # Database Management UI (Optional)
  adminer:
    image: adminer
    container_name: wa-gateway-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - wa-gateway-network
    profiles:
      - adminer

  # Redis Management UI (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: wa-gateway-redis-ui
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - wa-gateway-network
    profiles:
      - redis-ui

volumes:
  wa_credentials:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./wa_credentials
  media_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./media
  database_data:
    driver: local
  redis_data:
    driver: local
  logs_data:
    driver: local

networks:
  wa-gateway-network:
    driver: bridge
    name: wa-gateway-network